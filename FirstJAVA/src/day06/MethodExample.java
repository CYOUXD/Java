package day06;

import java.util.Scanner;

public class MethodExample {

	public static void main(String[] args) {
		// return
		/*
		 * - return은 메서드 실행을 끝내고 결과 값을 호출된 부분에 반환하는 문장
		 * - return문만 단독으로 사용했을 때는 호출된 곳으로 제어만 넘어감. (함수를 종료한다는 의미도 있음) 
		 * (제어가 넘어간다는게 호출되어진 함수가 끝나고 return을 만나면 해당 함수를 호출했던 곳으로 돌아가 진행한다는 의미)
		 *   하지만 return문 뒤에 연산식과 함께 사용 되면 식의 결과 값과 제어가 함께 넘어감.
		 */
		
		/*
		 * 메서드(Method)
		 * - 메서드는 반복되는 코드 블록에 이름을 붙여 놓은 것을 말함.
		 * (메서드와 함수의 차이점은 클래스 안에 있나 없나로 판단함)
		 * - 메서드는 반복되는 코드를 줄여주고, 좀 더 구조화된 코드를 만들어서 우리가 코드를 알아보기 쉽게 함
		 * - 객체지향 프로그래밍에서 메서드는 '객체가 가져야할 기능을 구현하기 위해서 만든다'라고 표현함
		 * - 메서드 이름 뒤에는 반드시 "()"(소괄호)가 따른다.
		 */
		
		/*
		 * 메서드 형식(선언 방법)
		 * <반환유형> <메서드 식별자 = 이름>( 매개 변수 ) {		= void main(String[] args)
		 * 		기능 상세;
		 * }
		 * 
		 * 메서드 구분, 매개변수
		 * - 유형1 : 매개변수가 있고, 반환 값이 있는 경우 > 전달인자(o), 반환값(o)
		 * - 유형2 : 매개변수가 있고, 반환 값이 없는 경우 > 전달인자(o), 반환값(x)
		 * - 유형3 : 매개변수가 없고, 반환 값이 있는 경우 > 전달인자(x), 반환값(o)
		 * - 유형4 : 매개변수가 없고, 반환 값이 없는 경우 > 전달인자(x), 반환값(x)
		 * 
		 * 매개변수(parameter)
		 * - 매개변수는 메서드가 실행될 대에 필요한 데이터를 외부로부터 받기 위해서 사용함
		 * - 매개변수도 변수의 일종으고 데이터 타입과 함께 선언해서 사용해야 하고, 초기화는 하지 않는다.(넘어오는 인자 값이 초기 값이므로 초기화는 안해도 됨)
		 * - 매개변수를 여러개 선언할 수 있고, 메서드가 외부로부터 받을 데이터가 없다면 선언하지 않아도 된다.
		 * 	  외부로 부터 받을 데이터가 없어서 매개변수가 필요 없다면 반환 유형이 없을 때 처럼 void로 쓰지 않고 소괄호 안을 비워두면 된다.
		 * 
		 * 반환 유형(return type)
		 * - 반환 유형은 메서드가 실행한 후에 메서드를 호출한 곳에 반환하는 값을 전달하는 데이터 타입.
		 * - 메서드는 반환값이 있을 수도 있고 없을 수도 있는데 없는 경우에는 반환 유형에 "void"를 사용.(반드시 써야함. 생략 불가)
		 * - 반환값이 있는 메서드를 호출할 때에는 해당 반환 유형에 맞는 변수에 반환 값을 저장해야 함.
		 * - 메서드 실행의 결과 값을 반환할 때 "return"키워드를 사용합니다.
		 * 
		 * 반환 유형 = Return을 썼을 때 리턴값으로 뭘 넘길 수 있는지 지정하는 것
		 */
		
		print();
		int num1 = input();
		int num2 = input();
		
		int result = add(num1, num2);
		showResult(result);
		
		// 메인 메서드가 실행이 끝나면 그 이후로는 실행되지 않는다.

	}
	
	
	
	//main이 static이라서 static을 사용해야한다.main이 static이므로 호출하려는 메서드들은 static이어야 불러올 수 있음
	static void print() {	//반환 값이 없는 경우, 매개변수도 없는 경우
		System.out.println("정수 두개 입력하세요!");
		
	} 
	static int input() {	//반환값이 있는 경우, 매개변수는 없는 경우
		Scanner scan = new Scanner(System.in);
		System.out.print("정수 입력 > ");
		int num = scan.nextInt();
		
		return num;
		// 위에서 반환유형이 int로 설정되어 있는데 return에서 int 값을 넘겨주지 않으면 에러가 난다. 반환 유형이 설정되면 반드시 해당 타입의 값을 return으로 넘겨줘야 한다.	
		
	}
	
	static int add(int num1, int num2) {	// 반환값이 있는 경우, 매개변수도 있는 경우
		int result = num1 + num2;
		return result;
	}
	
	static void showResult(int result) { 	// 반환 값이 없는 경우, 매개변수는 있는 경우
		System.out.println("덧셈 결과 : "+result);
	}
	

}
